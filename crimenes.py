# -*- coding: utf-8 -*-
"""crimenes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PSmTvLPw7GV_9VufcqzzkDSNBsCmgRQR
"""

import pandas as pd
import statsmodels.api as sm
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Cargar los datos
from google.colab import files
df=pd.read_csv('/content/drive/MyDrive/crimen.txt', delimiter='\t')


# Separar variables independientes (X) y dependiente (y)
X = df.drop(columns=['Crime'])  # Variables predictoras
y = df['Crime']                # Variable dependiente

# Agregar una constante para el término independiente
X = sm.add_constant(X)

# Ajustar el modelo de regresión lineal múltiple
model = sm.OLS(y, X).fit()

# Mostrar el resumen del modelo
print(model.summary())

# Predicción para las características dadas
nuevos_datos = pd.DataFrame({
    'const': [1],  # Agregar constante manualmente
    'M': [14.0],
    'So': [0],
    'Ed': [10.0],
    'Po1': [12.0],
    'Po2': [15.5],
    'LF': [0.640],
    'M.F': [94.0],
    'Pop': [150],
    'NW': [1.1],
    'U1': [0.120],
    'U2': [3.6],
    'Wealth': [3200],
    'Ineq': [20.1],
    'Prob': [0.04],
    'Time': [39.0]
})

# Predecir la tasa de crimen para las nuevas características
prediccion = model.predict(nuevos_datos)
print(f"Predicción de la tasa de crimen: {prediccion[0]}")

# Obtener las predicciones para todos los datos
y_pred = model.predict(X)  # Predicciones del modelo

# Calcular el MSE (Mean Squared Error)
mse = mean_squared_error(y, y_pred)
print("Mean Squared Error (MSE):", mse)

# Calcular el MAE (Mean Absolute Error)
mae = mean_absolute_error(y, y_pred)
print("Mean Absolute Error (MAE):", mae)

# Construcción de la ecuación de la regresión completa
equation = f"Crime = {model.params['const']:.4f}"
for col in X.columns[1:]:
    equation += f" + ({model.params[col]:.4f}) * {col}"

print("\nEcuación de la regresión OLS:")
print(equation)